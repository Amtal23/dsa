import java.util.*;

public class ShortestPathFinder {

    static class Graph {
        private int vertices;
        private List<List<Edge>> adjacencyList;

        public Graph(int vertices) {
            this.vertices = vertices;
            adjacencyList = new ArrayList<>(vertices);
            for (int i = 0; i < vertices; i++) {
                adjacencyList.add(new ArrayList<>());
            }
        }

        public void addEdge(int source, int destination, int weight) {
            adjacencyList.get(source).add(new Edge(destination, weight));
        }

        public int getVertices() {
            return vertices;
        }

        public List<Edge> getAdjacencyList(int vertex) {
            return adjacencyList.get(vertex);
        }
    }

    static class Edge {
        int destination;
        int weight;

        public Edge(int destination, int weight) {
            this.destination = destination;
            this.weight = weight;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Hardcoded example graph data
        int numberOfVertices = 5;
        Graph graph = new Graph(numberOfVertices);
        populateGraph(graph);

        System.out.println("Enter the source vertex:");
        int source = scanner.nextInt();

        measureAndRunAlgorithms(graph, source);
    }

    private static void populateGraph(Graph graph) {
        graph.addEdge(0, 1, 6);
        graph.addEdge(0, 2, 7);
        graph.addEdge(1, 2, 8);
        graph.addEdge(1, 3, 5);
        graph.addEdge(1, 4, -4);
        graph.addEdge(2, 3, -3);
        graph.addEdge(2, 4, 9);
        graph.addEdge(3, 1, -2);
        graph.addEdge(4, 0, 2);
        graph.addEdge(4, 3, 7);
    }

    private static void measureAndRunAlgorithms(Graph graph, int source) {
        long startTime, endTime;

        startTime = System.currentTimeMillis();
        runDijkstra(graph, source);
        endTime = System.currentTimeMillis();
        System.out.println("Dijkstra's Algorithm execution time: " + (endTime - startTime) + " ms");

        startTime = System.currentTimeMillis();
        runBellmanFord(graph, source);
        endTime = System.currentTimeMillis();
        System.out.println("Bellman-Ford Algorithm execution time: " + (endTime - startTime) + " ms");
    }

    private static void runDijkstra(Graph graph, int source) {
        int vertices = graph.getVertices();
        int[] distances = new int[vertices];
        boolean[] visited = new boolean[vertices];
        Arrays.fill(distances, Integer.MAX_VALUE);
        distances[source] = 0;

        PriorityQueue<int[]> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        priorityQueue.offer(new int[]{source, 0});

        while (!priorityQueue.isEmpty()) {
            int[] currentNode = priorityQueue.poll();
            int u = currentNode[0];
            if (visited[u]) continue;
            visited[u] = true;

            for (Edge edge : graph.getAdjacencyList(u)) {
                int v = edge.destination;
                int weight = edge.weight;
                if (!visited[v] && distances[u] + weight < distances[v]) {
                    distances[v] = distances[u] + weight;
                    priorityQueue.offer(new int[]{v, distances[v]});
                }
            }
        }

        printResults("Dijkstra", source, distances);
    }

    private static void runBellmanFord(Graph graph, int source) {
        int vertices = graph.getVertices();
        int[] distances = new int[vertices];
        Arrays.fill(distances, Integer.MAX_VALUE);
        distances[source] = 0;

        for (int i = 1; i < vertices; ++i) {
            for (int u = 0; u < vertices; ++u) {
                for (Edge edge : graph.getAdjacencyList(u)) {
                    int v = edge.destination;
                    int weight = edge.weight;
                    if (distances[u] != Integer.MAX_VALUE && distances[u] + weight < distances[v]) {
                        distances[v] = distances[u] + weight;
                    }
                }
            }
        }

        for (int u = 0; u < vertices; ++u) {
            for (Edge edge : graph.getAdjacencyList(u)) {
                int v = edge.destination;
                int weight = edge.weight;
                if (distances[u] != Integer.MAX_VALUE && distances[u] + weight < distances[v]) {
                    System.out.println("Graph contains negative weight cycle");
                    return;
                }
            }
        }

        printResults("Bellman-Ford", source, distances);
    }

    private static void printResults(String algorithm, int source, int[] distances) {
        System.out.println(algorithm + " Algorithm:");
        System.out.println("Vertex Distance from Source " + source);
        for (int i = 0; i < distances.length; i++) {
            System.out.println(i + "\t\t" + distances[i]);
        }
    }
}
