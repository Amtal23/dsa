public class AVLTree {
    class Node {
        int key;
        int height;
        Node left, right;

        Node(int key) {
            this.key = key;
            this.height = 1;
        }
    }

    private Node root;

    // Get the height of the node
    int height(Node N) {
        if (N == null) return 0;
        return N.height;
    }

    // Get the maximum of two integers
    int max(int a, int b) {
        return (a > b) ? a : b;
    }

    // Right rotate subtree rooted with y
    Node rightRotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;
        x.right = y;
        y.left = T2;
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;
        return x;
    }

    // Left rotate subtree rooted with x
    Node leftRotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;
        y.left = x;
        x.right = T2;
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;
        return y;
    }

    // Get balance factor of node N
    int getBalance(Node N) {
        if (N == null) return 0;
        return height(N.left) - height(N.right);
    }

    // Insert a key in the subtree rooted with node and returns the new root of the subtree
    Node insert(Node node, int key) {
        if (node == null) return new Node(key);
        if (key < node.key)
            node.left = insert(node.left, key);
        else if (key > node.key)
            node.right = insert(node.right, key);
        else // Duplicate keys not allowed
            return node;
        node.height = 1 + max(height(node.left), height(node.right));
        int balance = getBalance(node);
        // Left Left Case
        if (balance > 1 && key < node.left.key) return rightRotate(node);
        // Right Right Case
        if (balance < -1 && key > node.right.key) return leftRotate(node);
        // Left Right Case
        if (balance > 1 && key > node.left.key) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }
        // Right Left Case
        if (balance < -1 && key < node.right.key) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }
        return node;
    }

    // Find the node with the smallest value
    Node minValueNode(Node node) {
        Node current = node;
        while (current.left != null) current = current.left;
        return current;
    }

    // Delete a node
    Node deleteNode(Node root, int key) {
        if (root == null) return root;
        if (key < root.key)
            root.left = deleteNode(root.left, key);
        else if (key > root.key)
            root.right = deleteNode(root.right, key);
        else {
            if ((root.left == null) || (root.right == null)) {
                Node temp = null;
                if (temp == root.left) temp = root.right;
                else temp = root.left;
                if (temp == null) {
                    temp = root;
                    root = null;
                } else
                    root = temp;
            } else {
                Node temp = minValueNode(root.right);
                root.key = temp.key;
                root.right = deleteNode(root.right, temp.key);
            }
        }
        if (root == null) return root;
        root.height = max(height(root.left), height(root.right)) + 1;
        int balance = getBalance(root);
        // Left Left Case
        if (balance > 1 && getBalance(root.left) >= 0) return rightRotate(root);
        // Left Right Case
        if (balance > 1 && getBalance(root.left) < 0) {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }
        // Right Right Case
        if (balance < -1 && getBalance(root.right) <= 0) return leftRotate(root);
        // Right Left Case
        if (balance < -1 && getBalance(root.right) > 0) {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }
        return root;
    }

    // Search for a node
    Node search(Node root, int key) {
        if (root == null || root.key == key) return root;
        if (root.key > key) return search(root.left, key);
        return search(root.right, key);
    }

    // In-order traversal
    void inOrder(Node node) {
        if (node != null) {
            inOrder(node.left);
            System.out.print(node.key + " ");
            inOrder(node.right);
        }
    }

    // Pre-order traversal
    void preOrder(Node node) {
        if (node != null) {
            System.out.print(node.key + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }

    // Post-order traversal
    void postOrder(Node node) {
        if (node != null) {
            postOrder(node.left);
            postOrder(node.right);
            System.out.print(node.key + " ");
        }
    }

    public static void main(String[] args) {
        AVLTree tree = new AVLTree();
        tree.root = tree.insert(tree.root, 15);
        tree.root = tree.insert(tree.root, 10);
        tree.root = tree.insert(tree.root, 20);
        tree.root = tree.insert(tree.root, 8);
        tree.root = tree.insert(tree.root, 12);
        tree.root = tree.insert(tree.root, 25);
        tree.root = tree.insert(tree.root, 30);
        tree.root = tree.insert(tree.root, 18);

        System.out.println("Preorder traversal of the constructed AVL tree is:");
        tree.preOrder(tree.root);

        System.out.println("\nDeleting 10");
        tree.root = tree.deleteNode(tree.root, 10);
        System.out.println("Preorder traversal after deletion of 10:");
        tree.preOrder(tree.root);

        System.out.println("\nInorder traversal of the constructed AVL tree is:");
        tree.inOrder(tree.root);

        System.out.println("\nPostorder traversal of the constructed AVL tree is:");
        tree.postOrder(tree.root);

        System.out.println("\nSearching for 25 in the AVL tree:");
        Node result = tree.search(tree.root, 25);
        if (result != null) {
            System.out.println("Node 25 found in the AVL tree.");
        } else {
            System.out.println("Node 25 not found in the AVL tree.");
        }
    }
}
